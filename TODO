SAMPLER:
========
To be implemented:
 * Reading from named pipes
 * On start/stop. Print out current wall-time and internal sampler-time
   (kernel-time) when started in a well-known format. This will be used when
   mixing data from disconnected sources and can also be used for primitive
   RT-synchronization when clock-source is known to be the same (i.e. only
   offset and latency need correction).
 * Outstream to contain such info interleaved with certain periodicity
   (drift calculation). Format of such data will be specified for ease of
   filtering:
   ^#INFO:<type>[[:space:]]"<type specific data>"\n
   examples for "type"
   - debug "<any debug string>"
   - info "<any info string>"
   - error "<strings that should had or are replicated stderr>"
   - time INT:###.### RTC/TSC:###.### WALL:###.###
   Note that all times are given in decimal form in seconds and fractions of
   second, relative some fix or well known time (process-start,
   system-start, or epoc).
 * Options to make column 2 carry either RTC or TSC data as an alternative to
   current accuracy information.
 * All parameters should be possible to set in a configuration file.
 * Outdata buffering needs to be introduced.
 * Specific field containing time-info. Ability to let a data-field specify
   time. If internal sampler-time does not correspond to this field,
   internal time will be offset but will be done so according to a "slew"
   parameter. This enables real-time drift compensation. Special
   handling when time differs too greatly (exceeds certain limit):
   error-abort, error-print-ignore, trust-adjust-promptly.
 * Primitive 'buffer and sort' (first step)
 * Read from stdin Used for cascading samplers. Variant of reading from
 * (named-) pipes and very simlified form of SMIXER.

 sampler-net specific:
 * sampler-commando. Ability to interact with sampler.
   start/stop/pause/change-freq/query-time eta.
 * sampler-server: Add ability to send data on a socket (simplicity via nc is
   hence abandoned). This server should be able to accept several
   connections and to replicate data to all or none (where data will be
   buffered up to certain buff-size). Code from tcp_tap. I.e. this project
   needs to be made into a library also following the same concept as all of
   the other source-based libraries used in this project. -p <port> will
   replace -p <period-time> which will instead be named -t <period-time>.
 * sampler-client: data-source defines either TCP-port to read from or URI.
   Technically these are two different cases (from a TCP/IP perspective, one
   is server the other is client) but from a data acquisition perspective
   we define both cases as clients; as data is supposed to be served to the
   data-collector not he other way around (see sampler-server above for the
   opposite case). Two different formats must be used to represent the
   source (the data-source field in the ini-file).

Related:
 * Prepare for alternative to NO_SIG when cascaded or mixed sampling. This
   string could be formatted to indicate the source possibly needed for
   sampler-plot to figure out which is which (EXTERN##<id>).
 * Complete separation of sub-libraries from SAMPLER. This should work the
   same as libmqueue i.e. as a link into sampler root source-directory.
 * Links should go to projects parallel in structure as sampler. Note that
   there is a quirk regarding includes when including from libraries root
   (as it will become different depending on how it's built).
 * Make a script that creates above mentioned links (if needed). Embed into
   build-system preferably as /.configure or similar.

mlist:
 * Return element, not node (makes debugging harder, but code using lib
   cleaner and easier to read).
 * Implement all API fully. Scrap those that should go.
 * Sorting
 * Separate man-page

mtime:
 * Implement all API fully. Scrap those that should go.
 * Separate man-page

SAMPLER-PLOT:
=============
 * Move source from current place into ./bin (./test will be scrapped)
 * In play-back mode. Accept start-stop times without restarting

SAMPLER-EDITOR:
===============
 * Move source from current place into ./bin (./test will be scrapped)
 * Thumb-nails
 * Comment fields also saved in spc-file
   - Comments for fields
   - Comments for spc (use, purpose, limitations e.t.a.)
 * Radio buttons for bit-mask values
 * Section for "extra sampler options". Needed for RT-mode e.t.a.

BUILD-SYSTEM:
============
 * Build-system has become bloated, too complex and to externally dependent.
   Replace with cmake OR clean-up and make 1:1 identical with Android.
 * Make sure new build-system builds
   - recursively (in source libs)
   - concurrently
   - Can operate with libs in source-form (i.e. one project will also build
	 other projects)

DOCUMENTATION:
==============
 * Man-pages
 * Info-pages
 * Scrapping the old documentation system
 * LaTeX all. Main parts possibly separately (sampler, sampler-plot
   ,sampler-editor). LaTeX documentation could/should contain man/info
   content but the true reason for this documentation is to serve as how the
   internals work. It should hold academic standard.

OTHER:
=====
 * Prepare for upstream re-contribution. To be considered: What should go,
   what should stay (debug-helpers, non-related binaries, obsolete must go).

NEW PROJECTS:
==========
 * smixer: A improved sampler-sorter. Implemented as both library and
   binary. This variant shall be able to adjust for both simple time-offsets
   and drift from other sources in real-time. I.e. sample-plot should be able to
   connect to one instance only and get forward-continous data.
 * csampler: Cluster-sampler a distributed sampler. Enabling mixing of data
   aquisitions from other samplers. Same flags but extended format for
   data in-stream rules. What makes it different is ability to launch and
   control other sampler/csampler.
 * lmixer: A rule-based log mixer. Part of this project should be a Qt-based
   GUI able to intermix and time-adjust dynamically. It shall also be able
   to output two time-markers for sample-plot to be able to pick up.
