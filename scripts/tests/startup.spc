# -*- python -*-

import sampler_plot
import optparse
import re
import sys

TAG='STARTUP-SPC'

#
# @todo:
#
# Maybe redesign "process_template" to use CPU freq of a core a
# thread/process runs on based on:
#
# http://stackoverflow.com/questions/8032372/how-can-i-see-which-cpu-core-a-thread-is-running-in
#

boot_progress_dict = {'ams_ready': 90,
                      'enable_screen': 100,
                      'pms_data_scan_start': 60,
                      'pms_ready': 80,
                      'pms_scan_end': 70,
                      'pms_start': 40,
                      'pms_system_scan_start': 50,
                      'preload_end': 20,
                      'preload_start': 10,
                      'start': 5,
                      'system_run': 30}

ps_line_re = re.compile((r'^\s*(?P<USER>\S+)'
                         r'\s+(?P<PID>\d+)'
                         r'\s+(?P<PPID>\d+)'
                         r'\s+(?P<VSIZE>\d+)'
                         r'\s+(?P<RSS>\d+)'
                         r'\s+(?P<WCHAN>[\da-f]{8})'
                         r'\s+(?P<PC>[\da-f]{8})'
                         r'\s+(?P<STATUS>\S)'
                         r'\s+(?P<NAME>.*)'))

processor_re = re.compile(r'^processor\s*:\s*(\d+)')
int_re = re.compile(r'^\s*(\d+)')

class Startup(sampler_plot.SpcModule):
    def __init__(self):
        # default values will be used unless overriden by command-line options or context
        self.cores = 4
        self.cpufreq_max = 1512000
        self.cpu_load_processes = []
        self.cpu_load_threads = []
        self.stat_columns_count = 47
    def on_init(self):
        self.log(1, TAG, "on_init")
        self.mark_signal_as_template(None, ['CPU_template'])
        self.mark_signal_as_template(None, ['process_template'])
    def on_parser(self, parser):
        self.log(1, TAG, "on_parser")
        group = optparse.OptionGroup(parser, "SPC specific: startup.spc")
        group.add_option("--boot-progress",
                         action="store_true",
                         default=False,
                         dest="boot_progress",
                         help="Enable boot progress signal")
        group.add_option("--cores",
                         type="int",
                         dest="cores",
                         help="Set number of CPU cores available on the measured device. Default is to autodetect when context is available. Otherwise default value 4 is used")
        group.add_option("--cpufreq",
                         type="int",
                         dest="cpufreq_max",
                         help="Set the max CPU frequency on the measured device in kHz. Default is to autodetect when context is available. Otherwise default value 1512000 kHz is used")
        group.add_option("--stat-columns",
                         type="int",
                         dest="stat_columns_count",
                         help="Set the number of columns in /proc/[PID]/stat file. Default is to autodetect when context is available. Otherwise default value 47 is used")
        group.add_option("--process",
                         type="string",
                         dest="processes",
                         metavar="PROCESS_SPEC",
                         default=[],
                         action="append",
                         help="Measure CPU usage of a specified process. PROCESS_SPEC can be either PID, NAME or REGEXP. This option requires access to context")
        group.add_option("--thread",
                         type="string",
                         dest="threads",
                         metavar="THREAD_SPEC",
                         default=[],
                         action="append",
                         help="Measure CPU usage of a specified thread. THREAD_SPEC can be either PID, NAME or REGEXP. This option requires access to context")
        group.add_option("--process-thread",
                         type="string",
                         nargs=2,
                         dest="processes_threads",
                         metavar="PROCESS_SPEC THREAD_SPEC",
                         default=[],
                         action="append",
                         help="Measure CPU usage of a specified thread of a specified process. Process and thread are specified as by \"--process\" and \"--thread\" options. This option requires access to context")
        group.add_option("--pid",
                         type="string",
                         nargs=2, # pid, name
                         action="append",
                         default=[],
                         dest="pid",
                         metavar="PID NAME",
                         help="Measure CPU usage of a specified process. This option can be used without access to context, but make sure that --stat-columns=N is set correctly")
        group.add_option("--tid",
                         type="string",
                         nargs=3, # pid, tid, name
                         action="append",
                         default=[],
                         dest="tid",
                         metavar="PID TID NAME",
                         help="Measure CPU usage of a specified thread. This option can be used without access to context, but make sure that --stat-columns=N is set correctly")
        parser.add_option_group(group)
    def on_options_preprocess(self, options):
        # handle for backward compatibility:
        # --signal cores expr N
        # --signal cpu_freq_max expr N
        for i, (signal_id, key, value) in enumerate(options.signal_overrides):
            if signal_id == "cores" and key == "expr":
                if options.cores == None:
                    options.cores = int(value)
                self.mark_signal_override_as_applied(i)
            elif signal_id == "cpu_freq_max" and key == "expr":
                if options.cpufreq_max == None:
                    options.cpufreq_max = int(value)
                self.mark_signal_override_as_applied(i)
    def signal_set_expr(self, _id, value):
        _, _, signal = self.find_signal(None, [_id])
        signal['expr'] = "lambda x: %s" % (value,)
    def signal_set_expr_list(self, _id, template, list_of_args):
        self.signal_set_expr(_id, "[%s]" % (", ".join([template % args for args in list_of_args])))
    def on_context(self, options):
        self.log(1, TAG, "on_context")
        self.cores = int(list(self.shell(["cat", "/proc/cpuinfo"], tag="SHELL(cores)", regex=processor_re, group=1))[-1]) + 1
        self.set_context('cores', self.cores)
        self.cpufreq_max = int(list(self.shell(["cat", "/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq"], tag="SHELL(cpuinfo_max_freq)", regex=int_re, group=1))[0])
        self.set_context('cpufreq_max', self.cpufreq_max)
        # compile regex for --process --thread --process-thread
        process_specs = [re.compile(p) for p in options.processes]
        thread_specs = [(re.compile(p) if p else None, re.compile(t)) for p,t in ([(None, spec) for spec in options.threads] + options.processes_threads)]
        processes = {}
        self.cpu_load_processes = []
        if process_specs or thread_specs:
            for line in self.shell(["ps"], tag="SHELL(ps)", regex=ps_line_re):
                pid, name = line.group('PID'), line.group('NAME')
                processes[pid] = name
                if any([p.match(pid) or p.match(name) for p in process_specs]):
                    self.cpu_load_processes.append((pid, name))
        self.set_context('cpu_load_processes', self.cpu_load_processes)
        self.cpu_load_threads = []
        if thread_specs:
            for line in self.shell(["ps", "-t"], tag="SHELL(ps -t)", regex=ps_line_re):
                pid, ppid, name, pname = line.group('PID'), line.group('PPID'), line.group('NAME'), None
                if processes.has_key(pid):
                    ppid, pname = pid, name # main thread
                else:
                    pname = processes[ppid] if processes.has_key(ppid) else None # child thread
                #self.log(1, TAG, "ps -t: tid: %r %r; pid: %r %r" % (pid, name, ppid, pname))
                if any([(p == None or (ppid and p.match(ppid)) or (pname and p.match(pname))) and (t.match(pid) or t.match(name)) for p,t in thread_specs]):
                    self.log(1, TAG, "ps -t: tid: %r %r; pid: %r %r ****** " % (pid, name, ppid, pname))
                    self.cpu_load_threads.append((ppid, pid, name))
        self.set_context('cpu_load_threads', self.cpu_load_threads)
        self.stat_columns_count = len((list(self.shell(["cat", "/proc/1/stat"], tag="SHELL(stat_columns_count)"))[0]).split())
        self.set_context('stat_columns_count', self.stat_columns_count)
    def on_read_context(self, options):
        self.log(1, TAG, "on_read_context")
        self.cores = self.get_context('cores')
        self.cpufreq_max = self.get_context('cpufreq_max')
        self.cpu_load_processes = self.get_context('cpu_load_processes')
        self.cpu_load_threads = self.get_context('cpu_load_threads')
        self.stat_columns_count = self.get_context('stat_columns_count')
    def on_options(self, options):
        self.log(1, TAG, "on_options")
        # --cores
        if options.cores:
            self.cores = options.cores
        self.signal_set_expr('cores', "%d" % self.cores)
        _, idx, cpu_template = self.find_signal(None, ['CPU_template'])
        cpus = [self.clone_signal(cpu_template, {'cpuid': str(i)}) for i in range(self.cores)]
        for i, s in enumerate(cpus):
            _, _, cpu_stat = self.find_signal(s, ['CPU_stat%d_user' % i])
            cpu_stat['rgx_line_index'] = i + 1
        self.get_children()[idx:idx] = cpus
        list_of_cores_as_args = [(i,) for i in range(self.cores)]
        self.signal_set_expr_list('CPUs_utilizations_weighted', "CPU%d_utilization_weighted[0]", list_of_cores_as_args)
        self.signal_set_expr_list('CPUs_delta',                 "CPU%d_delta[0]",                list_of_cores_as_args)
        self.signal_set_expr_list('CPUs_online',                "CPU%d_online[0]",               list_of_cores_as_args)
        self.signal_set_expr_list('CPUs_frq',                   "CPU_frq_%d[0]",                  list_of_cores_as_args)
        self.signal_set_expr_list('CPUs_freq_max',              "CPU%d_freq_max[0]",             list_of_cores_as_args)
        # --cpufreq
        if options.cpufreq_max:
            self.cpufreq_max = options.cpufreq_max
        _, _, cpu_freq_max = self.find_signal(None, ['cpu_freq_max'])
        cpu_freq_max['expr'] = "lambda x: %d" % self.cpufreq_max
        # --stat-columns
        if options.stat_columns_count:
            self.stat_columns_count = options.stat_columns_count
        # --boot-progress
        _, _, boot_progress = self.find_signal(None, ['boot_progress'])
        boot_progress['expectable'] = options.boot_progress
        # --pid, --tid
        dicts = []
        stat_columns = [14,15,39] # the columns are: utime, stime, processor
        process_rgx_sig_index = ", ".join([str(self.stat_columns_count-n+1) for n in stat_columns])
        for pid, name in self.cpu_load_processes + options.pid:
            dicts.append({'pid': pid,
                          'process_id': 'p_%s' % pid,
                          'process_name': 'Process %s (pid=%s)' % (name, pid),
                          'process_stat': '/proc/%s/stat' % pid,
                          'process_rgx_sig_index': process_rgx_sig_index})
            self.log(1, TAG, "cloning \"process_template\" for pid=%r %r" % (int(pid), name))
        for ppid, pid, name in self.cpu_load_threads + options.tid:
            dicts.append({'pid': pid,
                          'process_id': 'p_%s' % pid,
                          'process_name': 'Thread %s (tid=%s)' % (name, pid),
                          'process_stat': '/proc/%s/task/%s/stat' % (ppid, pid),
                          'process_rgx_sig_index': process_rgx_sig_index})
            self.log(1, TAG, "cloning \"process_template\" for tid=%r %r" % (int(pid), name))
        _, idx, process_template = self.find_signal(None, ['process_template'])
        process_clones = [self.clone_signal(process_template, d) for d in dicts]
        self.get_children()[idx:idx] = process_clones

def avg(xs, fallback=None):
    sum_xs = sum([x for x in xs if x != None])
    len_xs = sum([1 for x in xs if x != None])
    return (sum_xs / len_xs) if len_xs > 0 else fallback

sampler_plot.register_module(Startup())

{'extra_feedgnuplot': '--ylabel="khz" --y2label="%" --ymin=0 --ymax=3200 --y2min=-10 --y2max=110',
 'period': 100000,
 'signals': [{'expectable': False,
              'exportable': False,
              'expr': '1512000',
              'id': 'cpu_freq_max',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': '4',
              'id': 'cores',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/meminfo',
              'id': 'MemTotal',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'MemTotal.*',
              'rgx_line_index': 1,
              'rgx_sig': '([0-9]+) kB',
              'rgx_sig_index': '1',
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/meminfo',
              'id': 'MemFree',
              'name': 'MemFree, MB (left)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'MemFree.*',
              'rgx_line_index': 1,
              'rgx_sig': '([0-9]+) kB',
              'rgx_sig_index': '1',
              'scale': 'lambda x: x/1024'},
             {'exportable': True,
              'fdata': '/proc/meminfo',
              'id': 'Buffers',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'Buffers.*',
              'rgx_line_index': 1,
              'rgx_sig': '([0-9]+) kB',
              'rgx_sig_index': '1',
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/meminfo',
              'id': 'Cached',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'Cached.*',
              'rgx_line_index': 1,
              'rgx_sig': '([0-9]+) kB',
              'rgx_sig_index': '1',
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/meminfo',
              'id': 'Active_anon',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'Active\\(anon\\).*',
              'rgx_line_index': 1,
              'rgx_sig': '([0-9]+) kB',
              'rgx_sig_index': '1',
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/meminfo',
              'id': 'Inactive_anon',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'Inactive\\(anon\\).*',
              'rgx_line_index': 1,
              'rgx_sig': '([0-9]+) kB',
              'rgx_sig_index': '1',
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/meminfo',
              'id': 'Active_file',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'Active\\(file\\).*',
              'rgx_line_index': 1,
              'rgx_sig': '([0-9]+) kB',
              'rgx_sig_index': '1',
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/meminfo',
              'id': 'Inactive_file',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'Inactive\\(file\\).*',
              'rgx_line_index': 1,
              'rgx_sig': '([0-9]+) kB',
              'rgx_sig_index': '1',
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/stat',
              'id': 'intr',
              'name': 'intr, x100 (left)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'intr',
              'rgx_line_index': 1,
              'rgx_sig': 'intr ([0-9]+)',
              'rgx_sig_index': '1',
              'scale': 'lambda x: x/100'},
             {'exportable': True,
              'fdata': '/proc/stat',
              'id': 'ctxt',
              'name': 'ctxt, x150 (left)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'ctxt',
              'rgx_line_index': 1,
              'rgx_sig': 'ctxt ([0-9]+)',
              'rgx_sig_index': '1',
              'scale': 'lambda x: x/150'},
             {'exportable': True,
              'fdata': '/proc/stat',
              'id': 'processes',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'processes',
              'rgx_line_index': 1,
              'rgx_sig': 'processes ([0-9]+)',
              'rgx_sig_index': '1',
              'visible': False},
             {'exportable': True,
              'fdata': '/proc/vmstat',
              'id': 'pgpgin',
              'name': 'pgpgin, x1000 (left)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': 'pgpgin',
              'rgx_line_index': 1,
              'rgx_sig': 'pgpgin ([0-9]+)',
              'rgx_sig_index': '1',
              'scale': 'lambda x: x/1000'},
             {'expectable': False,
              'exportable': False,
              'id': 'CPU_template',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'visible': False},
             {'exportable': True,
              'fdata': '/sys/devices/system/cpu/cpu%(cpuid)s/cpufreq/scaling_cur_freq',
              'id': 'CPU_frq_%(cpuid)s',
              'name': 'CPU%(cpuid)s freq, MHz (left)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: x / 1000',
              'subsignal': 1},
             {'exportable': True,
              'fdata': '/proc/stat',
              'fops_mask': '0x00000201',
              'id': 'CPU_stat%(cpuid)s_user',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_line': '^cpu[0-9]',
              'rgx_line_index': 1,
              'rgx_sig': '^.* ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)',
              'rgx_sig_index': '1 2 3 4 5 6 7',
              'subsignal': 1,
              'visible': False},
             {'exportable': False,
              'id': 'CPU_stat%(cpuid)s_nice',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'exportable': False,
              'id': 'CPU_stat%(cpuid)s_system',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'exportable': False,
              'id': 'CPU_stat%(cpuid)s_idle',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'exportable': False,
              'id': 'CPU_stat%(cpuid)s_iowait',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'exportable': False,
              'id': 'CPU_stat%(cpuid)s_irq',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'exportable': False,
              'id': 'CPU_stat%(cpuid)s_softirq',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (CPU%(cpuid)s_idle[-1] if not all(CPU_frq_%(cpuid)s[-1:1]) else CPU_stat%(cpuid)s_idle[0]) or 0.0',
              'id': 'CPU%(cpuid)s_idle',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: max(CPU_stat%(cpuid)s_iowait[0], CPU%(cpuid)s_iowait[-1])',
              'id': 'CPU%(cpuid)s_iowait',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: cores[0] >= 1 and all(CPU_frq_%(cpuid)s[-1:1]) and all(CPU_stat%(cpuid)s_user[-1:1])',
              'id': 'CPU%(cpuid)s_online',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (CPU_stat%(cpuid)s_user[0] + CPU_stat%(cpuid)s_nice[0]  + CPU_stat%(cpuid)s_system[0] + CPU%(cpuid)s_idle[0] + CPU%(cpuid)s_iowait[0]  + CPU_stat%(cpuid)s_irq[0]  + CPU_stat%(cpuid)s_softirq[0]) if CPU%(cpuid)s_online[0] else CPU%(cpuid)s_sum[-1]',
              'id': 'CPU%(cpuid)s_sum',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (CPU%(cpuid)s_sum[0] - CPU%(cpuid)s_sum[-1]) if CPU%(cpuid)s_online[0] and CPU%(cpuid)s_sum[-1] else 0',
              'id': 'CPU%(cpuid)s_delta',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: CPU%(cpuid)s_online[0] and CPU%(cpuid)s_delta[0] > 0',
              'id': 'CPU%(cpuid)s_has_stat',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (100 * (CPU_stat%(cpuid)s_user[0] - CPU_stat%(cpuid)s_user[-1]) / CPU%(cpuid)s_delta[0]) if CPU%(cpuid)s_has_stat[0] else 0',
              'id': 'CPU%(cpuid)s_fraction_user',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (100 * (CPU_stat%(cpuid)s_nice[0] - CPU_stat%(cpuid)s_nice[-1]) / CPU%(cpuid)s_delta[0]) if CPU%(cpuid)s_has_stat[0] else 0',
              'id': 'CPU%(cpuid)s_fraction_nice',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (100 * (CPU_stat%(cpuid)s_system[0] - CPU_stat%(cpuid)s_system[-1]) / CPU%(cpuid)s_delta[0]) if CPU%(cpuid)s_has_stat[0] else 0',
              'id': 'CPU%(cpuid)s_fraction_system',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (100 * (CPU%(cpuid)s_idle[0] - CPU%(cpuid)s_idle[-1]) / CPU%(cpuid)s_delta[0]) if CPU%(cpuid)s_has_stat[0] else 100',
              'id': 'CPU%(cpuid)s_fraction_idle',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (100 * (CPU%(cpuid)s_iowait[0] - CPU%(cpuid)s_iowait[-1]) / CPU%(cpuid)s_delta[0]) if CPU%(cpuid)s_has_stat[0] else 0',
              'id': 'CPU%(cpuid)s_fraction_iowait',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (100 * (CPU_stat%(cpuid)s_irq[0] - CPU_stat%(cpuid)s_irq[-1]) / CPU%(cpuid)s_delta[0]) if CPU%(cpuid)s_has_stat[0] else 0',
              'id': 'CPU%(cpuid)s_fraction_irq',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (100 * (CPU_stat%(cpuid)s_softirq[0] - CPU_stat%(cpuid)s_softirq[-1]) / CPU%(cpuid)s_delta[0]) if CPU%(cpuid)s_has_stat[0] else 0',
              'id': 'CPU%(cpuid)s_fraction_softirq',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: CPU%(cpuid)s_fraction_user[0] + CPU%(cpuid)s_fraction_nice[0]  + CPU%(cpuid)s_fraction_system[0] + CPU%(cpuid)s_fraction_idle[0]  + CPU%(cpuid)s_fraction_iowait[0]  + CPU%(cpuid)s_fraction_irq[0]  + CPU%(cpuid)s_fraction_softirq[0]',
              'id': 'CPU%(cpuid)s_fraction_sum',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: cpu_freq_max[0]',
              'id': 'CPU%(cpuid)s_freq_max',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: CPU%(cpuid)s_fraction_user[0] + CPU%(cpuid)s_fraction_nice[0]  + CPU%(cpuid)s_fraction_system[0] + CPU%(cpuid)s_fraction_irq[0]  + CPU%(cpuid)s_fraction_softirq[0]',
              'id': 'CPU%(cpuid)s_utilization',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (CPU%(cpuid)s_utilization[0] * CPU_frq_%(cpuid)s[0] / CPU%(cpuid)s_freq_max[0]) if CPU%(cpuid)s_has_stat[0] else 0',
              'id': 'CPU%(cpuid)s_utilization_weighted',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: [CPU0_utilization_weighted[0], CPU1_utilization_weighted[0], CPU2_utilization_weighted[0], CPU3_utilization_weighted[0]]',
              'id': 'CPUs_utilizations_weighted',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: sum(CPUs_utilizations_weighted[0]) / cores[0]',
              'id': 'CPUX_utilization_weighted',
              'name': 'CPU utilization, % (right)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: sum(CPUX_utilization_weighted[-2:2])/5',
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: [CPU0_frq[0], CPU1_frq[0], CPU2_frq[0], CPU3_frq[0]]',
              'id': 'CPUs_frq',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': False,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: [CPU0_freq_max[0], CPU1_freq_max[0], CPU2_freq_max[0], CPU3_freq_max[0]]',
              'id': 'CPUs_freq_max',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': False,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: [CPU0_online[0], CPU1_online[0], CPU2_online[0], CPU3_online[0]]',
              'id': 'CPUs_online',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': False,
              'visible': False},
             {'delay': 1,
              'expectable': False,
              'expr': 'lambda x: [CPU0_delta[0], CPU1_delta[0], CPU2_delta[0], CPU3_delta[0]]',
              'id': 'CPUs_delta',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'exportable': False,
              'subsignal': False,
              'visible': False},
             {'delay': 1,
              'expectable': False,
              'expr': 'lambda x: sum(CPUs_delta[0])',
              'id': 'CPUX_delta',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'exportable': False,
              'subsignal': False,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'id': 'process_template',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'visible': False},
             {'exportable': True,
              'fdata': '%(process_stat)s',
              'fops_mask': '0x00020201',
              'id': 'd_%(process_id)s_user',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_sig': ' ',
              'rgx_sig_index': '%(process_rgx_sig_index)s',
              'subsignal': 1,
              'visible': False},
             {'exportable': False,
              'id': 'd_%(process_id)s_kernel',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'exportable': False,
              'id': 'd_%(process_id)s_core',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: d_%(process_id)s_user[0] if d_%(process_id)s_user[0] != None else (d_%(process_id)s_user_mem[-1] if t[0] > 0 else 0)',
              'id': 'd_%(process_id)s_user_mem',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: d_%(process_id)s_kernel[0] if d_%(process_id)s_kernel[0] != None else (d_%(process_id)s_kernel_mem[-1] if t[0] > 0 else 0)',
              'id': 'd_%(process_id)s_kernel_mem',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (d_%(process_id)s_user_mem[0] - d_%(process_id)s_user_mem[-1]) + (d_%(process_id)s_kernel_mem[0] - d_%(process_id)s_kernel_mem[-1])',
              'id': 'd_%(process_id)s_delta',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 2,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: d_%(process_id)s_delta[0] * 100.0 / CPUX_delta[0] if CPUX_delta[0] > 0 else 0',
              'id': 'd_%(process_id)s_load',
              'name': '%(process_name)s load, %% (right)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: sum(d_%(process_id)s_load[-2:2])/5',
              'subsignal': 2,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (d_%(process_id)s_load[0] * CPUs_frq[0][int(d_%(process_id)s_core[0])] / CPUs_freq_max[0][int(d_%(process_id)s_core[0])]) if d_%(process_id)s_core[0] != None and CPUs_online[0][int(d_%(process_id)s_core[0])] else 0',
              'id': 'd_%(process_id)s_utilization',
              'name': '%(process_name)s utilization, %% (right)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: sum(d_%(process_id)s_utilization[-2:2])/5',
              'subsignal': 2,
              'y': 2},
             {'exportable': True,
              'fdata': '/sys/block/mmcblk0/stat',
              'fops_mask': '0x80000201',
              'id': 'mmcblk_read',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'rgx_sig': '([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+)',
              'rgx_sig_index': '3, 7',
              'visible': False},
             {'exportable': False,
              'id': 'mmcblk_write',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (mmcblk_read[0] - mmcblk_read[-1])/dt[0]',
              'id': 'mmcblk_read_ps',
              'name': 'MMC read, x1000 KB/s (right)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: (avg(mmcblk_read_ps[-2:2], fallback=0)) * 512 / (1024 * 1000)',
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (mmcblk_write[0] - mmcblk_write[-1])/dt[0]',
              'id': 'mmcblk_write_ps',
              'name': 'MMC write, x1000 KB/s (right)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: (avg(mmcblk_write_ps[-2:2], fallback=0)) * 512 / (1024 * 1000)',
              'subsignal': 1,
              'y': 2},
             {'exportable': True,
              'fdata': '/sys/class/power_supply/battery/current_now',
              'id': 'iBat_internal',
              'name': 'Current, mA / 2 + 1000 (left)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: -x / 2000 + 1000',
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (iBat_internal[0] * -1) / 1000000',
              'id': 'iBat_internal_SI',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: iBat_internal_SI[0]',
              'id': 'iBat_internal_plot',
              'name': 'iBat internal (mA*10), Right',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: x * 100',
              'subsignal': 1,
              'y': 2},
             {'exportable': True,
              'fdata': '/sys/class/power_supply/battery/voltage_now',
              'id': 'vBat_internal',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: vBat_internal[0] / 1000000',
              'id': 'vBat_internal_SI',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: vBat_internal_SI[0]',
              'id': 'vBat_internal_plot',
              'name': 'vBat internal (V), Right',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: x * 10',
              'subsignal': 1,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (iBat_internal_SI[0] * vBat_internal_SI[0])',
              'id': 'pBat_internal',
              'name': 'Power, W / 2 + 1000 (left)',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: -x / 2000000 + 1000',
              'visible': False,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: pBat_internal[0]',
              'id': 'pBat_internal_SI',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: pBat_internal_SI[0]',
              'id': 'pBat_internal_plot',
              'name': 'pBat internal, mean[3] (W), Right',
              'nosig': 'NO_SIG',
              'nuce': 3,
              'scale': 'lambda x: 10 * (sum(pBat_internal_plot[-1:1])/3)',
              'subsignal': 1,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: (boot_progress_dict[x], x) if boot_progress_dict.has_key(x) else (None, None)',
              'fdata': '/tmp/logcat_e.txt',
              'fops_mask': '4',
              'id': 'boot_progress',
              'nosig': 'NO_SIG',
              'nuce': 1,
              'rgx_line': 'I boot_progress_',
              'rgx_sig': '(^.* I boot_progress_)(.*)(:[[:space:]])(.*$)',
              'rgx_sig_index': '2',
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: boot_progress[0] if boot_progress[0] != boot_progress[-1] else (interpolate, interpolate)',
              'id': 'boot_progress_edge',
              'name': ' ',
              'nosig': 'NO_SIG',
              'subsignal': 1,
              'visible': False},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: boot_progress_edge[0]',
              'id': 'boot_progress_steps',
              'name': 'boot_progress',
              'nosig': 'NO_SIG',
              'style': 'with steps linewidth 3 linecolor rgb "black"',
              'subsignal': 1,
              'y': 2},
             {'expectable': False,
              'exportable': False,
              'expr': 'lambda x: boot_progress_edge[0]',
              'id': 'boot_progress_labels',
              'name': ' ',
              'nosig': 'NO_SIG',
              'style': 'using ($1):($2+2):3 with labels left',
              'subsignal': 1,
              'y': 2}],
 'sigs_file': '/data/local/tmp/startup.ini',
 'version': 2,
 'y_shift': 10}
